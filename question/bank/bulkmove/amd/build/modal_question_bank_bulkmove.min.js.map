{"version":3,"file":"modal_question_bank_bulkmove.min.js","sources":["../src/modal_question_bank_bulkmove.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the bulkmove questions modal.\n *\n * @module     qbank_bulkmove/modal_question_bank_bulkmove\n * @copyright  2024 onwards Catalyst IT EU {@link https://catalyst-eu.net}\n * @author     Simon Adams <simon.adams@catalyst-eu.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'core/modal';\nimport * as Fragment from 'core/fragment';\nimport {getString} from 'core/str';\nimport AutoComplete from 'core/form-autocomplete';\nimport {moveQuestions} from 'core_question/repository';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\n\nexport default class ModalQuestionBankBulkmove extends Modal {\n    static TYPE = 'qbank_bulkmove/bulkmove';\n\n    static SELECTORS = {\n        SAVE_BUTTON: '[data-action=\"bulkmovesave\"]',\n        SELECTED_QUESTIONS: 'table#categoryquestions input[id^=\"checkq\"]',\n        SEARCH_BANK: '#searchbanks',\n        SEARCH_CATEGORY: '#searchcategories',\n        CATEGORY_OPTIONS: '#searchcategories option',\n        BANK_OPTIONS: '#searchbanks option',\n        CATEGORY_ENHANCED_INPUT: '.search-categories input',\n        ORIGINAL_SELECTS: 'select.bulk-move',\n        CATEGORY_WARNING: '#searchcatwarning',\n        CATEGORY_SUGGESTION: '.search-categories span.form-autocomplete-downarrow',\n        CONFIRM_BUTTON: '.bulk-move-footer button[data-action=\"save\"]',\n        CANCEL_BUTTON: '.bulk-move-footer button[data-action=\"cancel\"]'\n    };\n\n    /**\n     * @param {integer} contextId The current bank context id.\n     * @param {integer} categoryId The current question category id.\n     */\n    static init(contextId, categoryId) {\n        document.addEventListener('click', (e) => {\n            const trigger = e.target;\n            if (trigger.classList.contains('dropdown-item') && trigger.getAttribute('name') === 'move') {\n                e.preventDefault();\n                ModalQuestionBankBulkmove.create({\n                    contextId,\n                    title: getString('bulkmoveheader', 'qbank_bulkmove'),\n                    show: true,\n                    categoryId: categoryId,\n                });\n            }\n        });\n    }\n\n    /**\n     * Set the initialised config on the class.\n     *\n     * @param {Object} modalConfig\n     */\n    configure(modalConfig) {\n        this.contextId = modalConfig.contextId;\n        this.targetBankContextId = modalConfig.contextId;\n        this.initSelectedCategoryId(modalConfig.categoryId);\n        modalConfig.removeOnClose = true;\n        super.configure(modalConfig);\n    }\n\n    /**\n     * Initialise the category select based on the data passed to the JS or if a filter is applied in the url.\n     * @param {integer} categoryId\n     */\n    initSelectedCategoryId(categoryId) {\n        const filter = new URLSearchParams(window.location.href).get('filter');\n        if (filter) {\n            const filteredCategoryId = JSON.parse(filter)?.category.values[0];\n            this.currentCategoryId = filteredCategoryId > 0 ? filteredCategoryId : null;\n            this.targetCategoryId = filteredCategoryId;\n            return;\n        }\n        this.currentCategoryId = categoryId;\n        this.targetCategoryId = categoryId;\n    }\n\n    /**\n     * Render the modal contents.\n     * @return {Promise}\n     */\n    show() {\n        void this.display(this.contextId, this.currentCategoryId);\n        return super.show();\n    }\n\n    /**\n     * Get the content to display and enhance the selects into auto complete fields.\n     * @param {integer} currentBankContextId\n     * @param {integer} currentCategoryId\n     */\n    async display(currentBankContextId, currentCategoryId) {\n        this.bodyPromise = await Fragment.loadFragment(\n            'qbank_bulkmove',\n            'bulk_move',\n            currentBankContextId,\n            {\n                'categoryid': currentCategoryId,\n            }\n        );\n\n        await this.setBody(this.bodyPromise);\n        await this.enhanceSelects(document.querySelectorAll(ModalQuestionBankBulkmove.SELECTORS.ORIGINAL_SELECTS));\n        this.registerEnhancedEventListeners();\n        this.mapCategoryContextIds();\n        this.updateSaveButtonState();\n    }\n\n    /**\n     * Register event listeners on the enhanced selects. Must be done after they have been enhanced.\n     */\n    registerEnhancedEventListeners() {\n        document.querySelector(ModalQuestionBankBulkmove.SELECTORS.SEARCH_CATEGORY).addEventListener(\"change\", (e) => {\n            const targetCategoryId = e.currentTarget.value;\n            this.targetCategoryId = targetCategoryId;\n            this.rebuildOptions(this.targetBankContextId, targetCategoryId);\n            this.updateSaveButtonState();\n        });\n\n        document.querySelector(ModalQuestionBankBulkmove.SELECTORS.SEARCH_BANK).addEventListener(\"change\", (e) => {\n            const selectedBankContextId = e.currentTarget.value;\n            this.targetBankContextId = selectedBankContextId;\n            this.rebuildOptions(selectedBankContextId, this.targetCategoryId);\n        });\n\n        this.getModal().on(\"click\", ModalQuestionBankBulkmove.SELECTORS.SAVE_BUTTON, (e) => {\n            e.preventDefault();\n            void this.displayConfirmMove();\n        });\n    }\n\n    /**\n     * Set a map, so we can determine which bank belongs to which category.\n     */\n    mapCategoryContextIds() {\n        const customSelectCategoryOptions = document.querySelectorAll(ModalQuestionBankBulkmove.SELECTORS.CATEGORY_OPTIONS);\n\n        if (customSelectCategoryOptions.length === 0) {\n            return;\n        }\n\n        const categoryContextIds = [];\n\n        customSelectCategoryOptions.forEach((option) => {\n            categoryContextIds[option.value] = option.dataset.bankContextid;\n        });\n\n        this.categoryContextIds = categoryContextIds;\n    }\n\n    /**\n     * Update the body with a confirmation prompt and set confirm cancel buttons in the footer.\n     * @return {Promise<void>}\n     */\n    async displayConfirmMove() {\n        this.setTitle(getString('confirm', 'core'));\n        this.setBody(getString('confirmmove', 'qbank_bulkmove'));\n        if (!this.hasFooterContent()) {\n            // We don't have the footer yet so go grab it and register event listeners on the buttons.\n            this.setFooter(Templates.render('qbank_bulkmove/bulk_move_footer', {}));\n            await this.getFooterPromise();\n\n            document.querySelector(ModalQuestionBankBulkmove.SELECTORS.CONFIRM_BUTTON).addEventListener(\"click\", (e) => {\n                e.preventDefault();\n                this.moveQuestionsAfterConfirm(this.targetBankContextId, this.targetCategoryId);\n            });\n\n            document.querySelector(ModalQuestionBankBulkmove.SELECTORS.CANCEL_BUTTON).addEventListener(\"click\", (e) => {\n                e.preventDefault();\n                this.setTitle(getString('bulkmoveheader', 'qbank_bulkmove'));\n                this.setBodyContent(Templates.renderForPromise('core/loading', {}));\n                this.hideFooter();\n                this.display(this.targetBankContextId, this.targetCategoryId);\n            });\n        } else {\n            // We already have a footer so just show it.\n            this.showFooter();\n        }\n    }\n\n    /**\n     * Dynamically update all enhanced selects options based on what is selected.\n     *\n     * @param {integer} selectedBankContextId\n     * @param {integer} selectedCategoryId\n     */\n    rebuildOptions(selectedBankContextId, selectedCategoryId) {\n        const categoryContextIds = this.categoryContextIds;\n        const customSelectCategoryOptions = document.querySelectorAll(ModalQuestionBankBulkmove.SELECTORS.CATEGORY_OPTIONS);\n\n        // Disable the category selector if no bank selected.\n        if (!selectedBankContextId) {\n            this.updateCategorySelectorState(false);\n        } else {\n            // Mark to be disabled all the categories not belonging to the selected bank.\n            // This will then be handled by the enhanced selects event handlers.\n            customSelectCategoryOptions.forEach((option) => {\n                if (option.dataset.bankContextid != selectedBankContextId) {\n                    option.dataset.enabled = 'disabled';\n                } else {\n                    option.dataset.enabled = 'enabled';\n                }\n            });\n            this.updateCategorySelectorState(true);\n        }\n\n        // De-select the selected category if it does not belong to the selected bank.\n        if (selectedCategoryId && selectedBankContextId && categoryContextIds[selectedCategoryId] != selectedBankContextId) {\n            const selectedCategoryElement = document.querySelector(\n                '.search-categories span[role=\"option\"][data-value=\"' + selectedCategoryId + '\"]'\n            );\n            selectedCategoryElement.click();\n        }\n    }\n\n    /**\n     * Disable/enable the enhanced category selector field.\n     * @param {boolean} toEnable True to enable, false to disable the field.\n     */\n    updateCategorySelectorState(toEnable) {\n        const warning = document.querySelector(ModalQuestionBankBulkmove.SELECTORS.CATEGORY_WARNING);\n        const enhancedInput = document.querySelector(ModalQuestionBankBulkmove.SELECTORS.CATEGORY_ENHANCED_INPUT);\n        const suggestionButton = document.querySelector(ModalQuestionBankBulkmove.SELECTORS.CATEGORY_SUGGESTION);\n\n        if (toEnable) {\n            warning.classList.add('d-none');\n            enhancedInput.removeAttribute('disabled');\n            suggestionButton.classList.remove('d-none');\n        } else {\n            warning.classList.remove('d-none');\n            enhancedInput.setAttribute('disabled', 'disabled');\n            suggestionButton.classList.add('d-none');\n        }\n    }\n\n    /**\n     * Disable the button if the selected category is the same as the one the questions already belong to. Enable it otherwise.\n     */\n    updateSaveButtonState() {\n        const saveButton = document.querySelector(ModalQuestionBankBulkmove.SELECTORS.SAVE_BUTTON);\n        const targetCategoryId = this.targetCategoryId;\n\n        if (targetCategoryId && targetCategoryId != this.currentCategoryId) {\n            saveButton.removeAttribute('disabled');\n        } else {\n            saveButton.setAttribute('disabled', 'disabled');\n        }\n    }\n\n    /**\n     * Move the selected questions to their new target category.\n     * @param {integer} targetContextId the target bank context id.\n     * @param {integer} targetCategoryId the target question category id.\n     * @return {Promise<void>}\n     */\n    async moveQuestionsAfterConfirm(targetContextId, targetCategoryId) {\n        await this.setBody(Templates.render('core/loading', {}));\n        const qelements = document.querySelectorAll(ModalQuestionBankBulkmove.SELECTORS.SELECTED_QUESTIONS);\n        const questionids = [];\n        qelements.forEach((element) => {\n            if (element.checked) {\n                const name = element.getAttribute('name');\n                questionids.push(name.substr(1, name.length));\n            }\n        });\n        if (questionids.length === 0) {\n            await Notification.exception('No questions selected');\n        }\n\n        try {\n            window.location.href = await moveQuestions(\n                targetContextId,\n                targetCategoryId,\n                questionids.join(),\n                window.location.href\n            );\n        } catch (error) {\n            await Notification.exception(error);\n        }\n    }\n\n    /**\n     * Take the provided select options and enhance them into auto-complete fields.\n     * @param {NodeList} selects Custom select elements to enhance.\n     * @return {Promise<Promise[]>}\n     */\n    async enhanceSelects(selects) {\n        const placeholder = await getString('searchbyname', 'mod_quiz');\n        const enhanced = [];\n\n        if (selects.length > 0) {\n            for (let i = 0; i < selects.length; i++) {\n                enhanced.push(AutoComplete.enhance(\n                        selects.item(i),\n                        false,\n                        '',\n                        placeholder,\n                        false,\n                        true,\n                        '',\n                        true\n                    )\n                );\n            }\n\n            return Promise.all(enhanced);\n        }\n\n        return Promise.reject('No selects to enhance');\n    }\n}\n"],"names":["ModalQuestionBankBulkmove","Modal","contextId","categoryId","document","addEventListener","e","trigger","target","classList","contains","getAttribute","preventDefault","create","title","show","configure","modalConfig","targetBankContextId","initSelectedCategoryId","removeOnClose","filter","URLSearchParams","window","location","href","get","filteredCategoryId","JSON","parse","_JSON$parse","category","values","currentCategoryId","targetCategoryId","this","display","super","currentBankContextId","bodyPromise","Fragment","loadFragment","setBody","enhanceSelects","querySelectorAll","SELECTORS","ORIGINAL_SELECTS","registerEnhancedEventListeners","mapCategoryContextIds","updateSaveButtonState","querySelector","SEARCH_CATEGORY","currentTarget","value","rebuildOptions","SEARCH_BANK","selectedBankContextId","getModal","on","SAVE_BUTTON","displayConfirmMove","customSelectCategoryOptions","CATEGORY_OPTIONS","length","categoryContextIds","forEach","option","dataset","bankContextid","setTitle","hasFooterContent","showFooter","setFooter","Templates","render","getFooterPromise","CONFIRM_BUTTON","moveQuestionsAfterConfirm","CANCEL_BUTTON","setBodyContent","renderForPromise","hideFooter","selectedCategoryId","enabled","updateCategorySelectorState","click","toEnable","warning","CATEGORY_WARNING","enhancedInput","CATEGORY_ENHANCED_INPUT","suggestionButton","CATEGORY_SUGGESTION","add","removeAttribute","remove","setAttribute","saveButton","targetContextId","qelements","SELECTED_QUESTIONS","questionids","element","checked","name","push","substr","Notification","exception","join","error","selects","placeholder","enhanced","i","AutoComplete","enhance","item","Promise","all","reject","BANK_OPTIONS"],"mappings":"quDAiCqBA,kCAAkCC,2BAsBvCC,UAAWC,YACnBC,SAASC,iBAAiB,SAAUC,UAC1BC,QAAUD,EAAEE,OACdD,QAAQE,UAAUC,SAAS,kBAAqD,SAAjCH,QAAQI,aAAa,UACpEL,EAAEM,iBACFZ,0BAA0Ba,OAAO,CAC7BX,UAAAA,UACAY,OAAO,kBAAU,iBAAkB,kBACnCC,MAAM,EACNZ,WAAYA,iBAW5Ba,UAAUC,kBACDf,UAAYe,YAAYf,eACxBgB,oBAAsBD,YAAYf,eAClCiB,uBAAuBF,YAAYd,YACxCc,YAAYG,eAAgB,QACtBJ,UAAUC,aAOpBE,uBAAuBhB,kBACbkB,OAAS,IAAIC,gBAAgBC,OAAOC,SAASC,MAAMC,IAAI,aACzDL,OAAQ,uBACFM,uCAAqBC,KAAKC,MAAMR,sCAAXS,YAAoBC,SAASC,OAAO,eAC1DC,kBAAoBN,mBAAqB,EAAIA,mBAAqB,eAClEO,iBAAmBP,yBAGvBM,kBAAoB9B,gBACpB+B,iBAAmB/B,WAO5BY,cACSoB,KAAKC,QAAQD,KAAKjC,UAAWiC,KAAKF,mBAChCI,MAAMtB,qBAQHuB,qBAAsBL,wBAC3BM,kBAAoBC,SAASC,aAC9B,iBACA,YACAH,qBACA,YACkBL,0BAIhBE,KAAKO,QAAQP,KAAKI,mBAClBJ,KAAKQ,eAAevC,SAASwC,iBAAiB5C,0BAA0B6C,UAAUC,wBACnFC,sCACAC,6BACAC,wBAMTF,iCACI3C,SAAS8C,cAAclD,0BAA0B6C,UAAUM,iBAAiB9C,iBAAiB,UAAWC,UAC9F4B,iBAAmB5B,EAAE8C,cAAcC,WACpCnB,iBAAmBA,sBACnBoB,eAAenB,KAAKjB,oBAAqBgB,uBACzCe,2BAGT7C,SAAS8C,cAAclD,0BAA0B6C,UAAUU,aAAalD,iBAAiB,UAAWC,UAC1FkD,sBAAwBlD,EAAE8C,cAAcC,WACzCnC,oBAAsBsC,2BACtBF,eAAeE,sBAAuBrB,KAAKD,0BAG/CuB,WAAWC,GAAG,QAAS1D,0BAA0B6C,UAAUc,aAAcrD,IAC1EA,EAAEM,iBACGuB,KAAKyB,wBAOlBZ,8BACUa,4BAA8BzD,SAASwC,iBAAiB5C,0BAA0B6C,UAAUiB,qBAEvD,IAAvCD,4BAA4BE,oBAI1BC,mBAAqB,GAE3BH,4BAA4BI,SAASC,SACjCF,mBAAmBE,OAAOb,OAASa,OAAOC,QAAQC,sBAGjDJ,mBAAqBA,mDAQrBK,UAAS,kBAAU,UAAW,cAC9B3B,SAAQ,kBAAU,cAAe,mBACjCP,KAAKmC,wBAmBDC,mBAjBAC,UAAUC,mBAAUC,OAAO,kCAAmC,WAC7DvC,KAAKwC,mBAEXvE,SAAS8C,cAAclD,0BAA0B6C,UAAU+B,gBAAgBvE,iBAAiB,SAAUC,IAClGA,EAAEM,sBACGiE,0BAA0B1C,KAAKjB,oBAAqBiB,KAAKD,qBAGlE9B,SAAS8C,cAAclD,0BAA0B6C,UAAUiC,eAAezE,iBAAiB,SAAUC,IACjGA,EAAEM,sBACGyD,UAAS,kBAAU,iBAAkB,wBACrCU,eAAeN,mBAAUO,iBAAiB,eAAgB,UAC1DC,kBACA7C,QAAQD,KAAKjB,oBAAqBiB,KAAKD,sBAcxDoB,eAAeE,sBAAuB0B,0BAC5BlB,mBAAqB7B,KAAK6B,mBAC1BH,4BAA8BzD,SAASwC,iBAAiB5C,0BAA0B6C,UAAUiB,qBAG7FN,uBAKDK,4BAA4BI,SAASC,SAC7BA,OAAOC,QAAQC,eAAiBZ,sBAChCU,OAAOC,QAAQgB,QAAU,WAEzBjB,OAAOC,QAAQgB,QAAU,kBAG5BC,6BAA4B,SAX5BA,6BAA4B,GAejCF,oBAAsB1B,uBAAyBQ,mBAAmBkB,qBAAuB1B,sBAAuB,CAChFpD,SAAS8C,cACrC,sDAAwDgC,mBAAqB,MAEzDG,SAQhCD,4BAA4BE,gBAClBC,QAAUnF,SAAS8C,cAAclD,0BAA0B6C,UAAU2C,kBACrEC,cAAgBrF,SAAS8C,cAAclD,0BAA0B6C,UAAU6C,yBAC3EC,iBAAmBvF,SAAS8C,cAAclD,0BAA0B6C,UAAU+C,qBAEhFN,UACAC,QAAQ9E,UAAUoF,IAAI,UACtBJ,cAAcK,gBAAgB,YAC9BH,iBAAiBlF,UAAUsF,OAAO,YAElCR,QAAQ9E,UAAUsF,OAAO,UACzBN,cAAcO,aAAa,WAAY,YACvCL,iBAAiBlF,UAAUoF,IAAI,WAOvC5C,8BACUgD,WAAa7F,SAAS8C,cAAclD,0BAA0B6C,UAAUc,aACxEzB,iBAAmBC,KAAKD,iBAE1BA,kBAAoBA,kBAAoBC,KAAKF,kBAC7CgE,WAAWH,gBAAgB,YAE3BG,WAAWD,aAAa,WAAY,4CAUZE,gBAAiBhE,wBACvCC,KAAKO,QAAQ+B,mBAAUC,OAAO,eAAgB,WAC9CyB,UAAY/F,SAASwC,iBAAiB5C,0BAA0B6C,UAAUuD,oBAC1EC,YAAc,GACpBF,UAAUlC,SAASqC,aACXA,QAAQC,QAAS,OACXC,KAAOF,QAAQ3F,aAAa,QAClC0F,YAAYI,KAAKD,KAAKE,OAAO,EAAGF,KAAKzC,aAGlB,IAAvBsC,YAAYtC,cACN4C,sBAAaC,UAAU,6BAI7BrF,OAAOC,SAASC,WAAa,6BACzByE,gBACAhE,iBACAmE,YAAYQ,OACZtF,OAAOC,SAASC,MAEtB,MAAOqF,aACCH,sBAAaC,UAAUE,6BAShBC,eACXC,kBAAoB,kBAAU,eAAgB,YAC9CC,SAAW,MAEbF,QAAQhD,OAAS,EAAG,KACf,IAAImD,EAAI,EAAGA,EAAIH,QAAQhD,OAAQmD,IAChCD,SAASR,KAAKU,0BAAaC,QACnBL,QAAQM,KAAKH,IACb,EACA,GACAF,aACA,GACA,EACA,IACA,WAKLM,QAAQC,IAAIN,iBAGhBK,QAAQE,OAAO,4FAzSTxH,iCACH,2CADGA,sCAGE,CACf2D,YAAa,+BACbyC,mBAAoB,8CACpB7C,YAAa,eACbJ,gBAAiB,oBACjBW,iBAAkB,2BAClB2D,aAAc,sBACd/B,wBAAyB,2BACzB5C,iBAAkB,mBAClB0C,iBAAkB,oBAClBI,oBAAqB,sDACrBhB,eAAgB,+CAChBE,cAAe"}